-*- mode: markdown -*-

*This is a brief tutorial on Tori-Lisp, an ersatz Lisp for little
birds. A passing familiarity with Lisp and Lisp-like languages is
presumed.*

TL programs consist of expressions. The simplest expressions are
things like numbers and strings, which evaluate to themselves.

    鳥>  25
    ;;=> 25

    鳥>  "foo"
    ;;=> 'foo'

There's an important detail about TL that bears mentioning at this
time. That is, the language is hosted on the JavaScript programming
language and thus "bottoms-out" at JavaScript data-types and
structures. Therefore, the TL console will always display its
results as JavaScript types and indeed, the evaluation engine of
the language operates on and with JavaScript types and functions.

TL is like most Lisp-like languages in that the list form
represents a function call:

    鳥>  (+ 1 2)
    ;;=> 3

Since expression and evaluation are both defined recursively, 
programs can be as complex as you want:

    鳥>  (+ (+ 1 2) (+ 3 (+ 4 5)))
    ;;=> 15 

Unlike many Lisps, TL functions always expect a fixed number of 
arguments. For example, the `+` function shown above expects to
receive 2 arguments and if it receives too many then an error
occurs:

    鳥>  (+ 1 2 3)
    ;;=> Error: Too many arguments to function: expected 2, got 3

However, if you supply fewer arguments than a function expects then
a new function will be returned:

    鳥>  (+ 1)
    ;;=> [Function: curried]

Functions in TL are "curried" by default. This means that when a 
function is called it might return another function that expects to 
receive the remainder of its expected arguments. Once all of the 
expected arguments are received the function is executed and a 
result returned.

    鳥>  ((+ 1) 2)
    ;;=> 3

Lisp dialects like TL have a data type most languages don't:
symbols.  We've already seen one: `+` is a symbol.  Symbols don't
evaluate to themselves the way numbers and strings do.  They return
whatever value they've been assigned.

If we give `foo` the value 13 in the global scope, it will return 
13 when evaluated:

    鳥>  (def foo 13)
	;;=> 13
    鳥>  foo
	;;=> 13

You can turn off evaluation by putting a single quote character
before an expression.  So `'foo` returns the JavaScript equivalent
to a TL symbol `"'foo"`.

    鳥>  'foo
	;;=> "'foo"

Particularly observant readers may be wondering how we got away
with using `foo` as the first argument to `def`.  If the arguments 
are evaluated left to right, why didn't this cause an error when 
`foo` was evaluated?  There are some operators that violate the usual
evaluation rule, and `def` is one of them.  Its first argument isn't
evaluated.

    鳥>  (+ 1 2)
	;;=> 3
    鳥>  '(+ 1 2)
	;;=> ["'+", 1, 2]

The first expression returns the number 3.  The second, because it
was quoted, returns a JS array consisting of the string `"'+` and the 
numbers 1 and 2. The use of the pattern `"'symbol"` is the way that
symbols are encoded in TL.

You can build up TL lists with `cons`, which returns a list with a new
element on the front:

    鳥>  (cons 'f '(a b))
	;;=> [ "'f", "'a", "'b" ]

It doesn't change the original list:

    鳥> (def x '(a b))
    ;=> [ "'a", "'b" ]
	
    鳥> (cons 'f x)
    ;;=> [ "'f", "'a", "'b" ]
	
    鳥> x
    ;=> [ "'a", "'b" ]

The empty list is represented by the symbol `nil`, which is defined
to evaluate to itself.  So to make a list of one element you say:

    鳥> (cons 'a nil)
	;;=> [ "'a" ]

You can take lists apart with car and cdr, which return the first
element and everything but the first element respectively:

    鳥>  (first '(a b c))
	;;=> "'a"
	
    鳥>  (rest '(a b c))
	;;=> ["'b", "'c"]

Additionally, TL provides a `head` function to take apart a list by 
returning a list of the first element:

    鳥>  (head '(a b c))
    ;;=> [ "'a" ]

To create a list with many elements you can use the `list` function:

    鳥>  (list 'a 1 "foo" '(b))
	;;=> [ "'a", 1, 'foo', [ "'b" ] ]

However, TL also provides a list literal syntax using elements placed
between square brackets:

    鳥>  ['a 1 "foo" ['b]]
	;;=> [ "'a", 1, 'foo', [ "'b" ] ]

We've already seen some functions: `+`, `cons`, `first`, `rest`, and `head`.
You can define new ones with def, which takes a symbol to use as the name, a 
list of symbols representing the parameters, and then zero or more expressions 
called the body.  When the function is called, those expressions will be 
evaluated in order with the symbols in the body temporarily set ("bound") to 
the corresponding argument. Whatever the last expression returns will be 
returned as the value of the call.

Here's a function that takes two numbers and returns their average:

    鳥>  (def average {x y | (/ (+ x y) 2)})
    ;;=> [Function: curried]
    鳥>  (average 2 4)
    ;;=> 3

From the definition above you'll notice that TL uses a literal syntax for
functions of the form `{args | body}`. This is sugar for the more conventional
`(λ (x y) (/ (+ x y) 2))` form. In either case, the body of the function consists 
of one expression, (/ (+ x y) 2). It's common for functions to consist of one 
expression; in purely functional code (code with no side-effects) they always do.

What's the strange-looking object returned as the value of the `def`
expression?  That's what a function looks like.  In TL, as in most
Lisps, functions are a data type, just like numbers or strings.

Indeed, user-defined functions can be inspected at runtime:

	鳥>  (meta/body average)
	;;=> [ [ "'/", [ "'+", "'x", "'y" ], 2 ] ]
	
	鳥>  (meta/params average)
	;;=> [ "'x", "'y" ]

This capability will come in handy later in the tutorial but for now we can
proceed.

Of course you can use a literal function wherever you could use
a symbol whose value is one, e.g.

    鳥>  ({x y | (/ (+ x y) 2)} 2 4)
    ;;=> 3

This expression has three elements, `{x y | (/ (+ x y) 2)}`, which
yields a function that returns averages, and the numbers 2 and 4.
So when you evaluate all three expressions and pass the values of
the second and third to the value of the first, you pass 2 and 4
to a function that returns averages, and the result is 3.

There's one thing you can't do with functions that you can do with
data types like symbols and strings: you can't print them out in a
way that could be read back in.  The reason is that the function 
could be a closure; displaying closures is a tricky problem.

In TL, data structures can be used wherever functions are, and
they behave as functions from indices to whatever's stored there.
So to get the first element of a string you say:

    鳥>  ("foo" 0)
    ;;=> 'f'

Or to get a slice of the string you can use:

    鳥>  ("foo" 0 2)
    ;;=> 'fo'

There is one commonly used operator for establishing temporary
variables, namely `let`.

    鳥>  (let (x 1) 
           (+ x (* x 2)))
    ;;=> 3

To bind multiple variables, just add more pairs to the `let`.

    鳥>  (let (x 3 y 4)
           (+ (* x 2) (* y 2)))
    ;;=> 14

So far we've only had things printed out implicity as a result of
evaluating them.  The standard way to print things out in the middle
of evaluation is with `out`. It takes multiple arguments, the first 
being the "port" to print to and the rest that print in order.

Here's a variant of average that tells us what its arguments were:

    鳥> (def average 
	      {x y | (do (out <c> "my args were: " x " and " y crlf) 
		             (/ (+ x y) 2))})
    ;;=> [Function: curried]
	
    鳥>  (average 100 200)
    my args were: 100 and 200
    ;;=> 150

A couple of points to note about the call to `out` is that the first 
argument is the "port" that the rest of the arguments are written to.
In the case of the call above, the argument `<c>` means that the
print happens to the console (i.e. stdout). Also, the argument `crlf`
indicates that a newline should be printed.

The standard conditional operator is `if`.  Like `def`, it doesn't
evaluate all of its arguments.  When given three arguments, it evaluates
the first, and if that returns `true`, it returns the value of the
second, otherwise the value of the third:

    鳥>  (if (odd? 1) 'a 'b)
    ;;=> "'a"
    鳥>  (if (even? 1) 'a 'b)
    ;;=> "'b"

Returning `true` means returning anything except `nil`.  `nil` is
conventionally used to represent falsity as well as the empty list.

    鳥>  (if nil 'a 'b)
	;;=> "'b"
	
    鳥>  nil
	;;=> []

The symbol `#t` is often used to represent truth, but any value other 
than `nil`, `false`, or `undefined` would serve just as well.

    鳥> (odd? 1)
    ;;=> true
	
    鳥> (odd? 2)
    ;;=> false

If the third argument to `if` is missing the result is `undefined`.

    鳥>  (if #f 1)
    ;;=> undefined

Each argument to if is a single expression, so if you want to do
multiple things depending on the result of a test, combine them
into one expression with `do`.

    鳥>  (do (out <c> "hello" crlf) 
	         (+ 2 3))
    hello
    ;;=> 5

If you just want several expressions to be evaluated when some
condition is true, you could say

    鳥>  (if #t
           (do 1
             2))
    ;;=> 2

As shown, the last expression in the `do` block is the return value of 
the block itself.

    鳥>  (and nil 
	       (out <c> "you'll never see this"))
    ;;=> []

The negation operator is called `no`, a name that also works when
talking about `nil` as the empty list.  Here's a function to return
the length of a list:

    鳥>  (def mylen 
	       (λ (xs)
             (if (no xs)
               0
               (+ 1 (mylen (rest xs))))))
	;;=> [Function: fn]

If the list is `nil` the function will immediately return 0.  Otherwise
it returns 1 more than the length of the `rest` of the list.

	鳥>  (mylen nil)
	;;=> 0
	鳥>  (mylen '(a b c))
	;;=> 3

I called it `mylen` because there's already a function called `len` for
this.  You're welcome to redefine TL functions, but redefining
`len` this way might break code that depended on it, because `len` works
on more than lists like strings and even functions.

    鳥>  (len "abc")
	;;=> 3
    鳥>  (len {a | a})
	;;=> 1
    鳥>  (len +)
	;;=> 2

The standard comparison operator is `is?`, which returns `true` if its
arguments are identical or, if lexemes (i.e. strings and symbols), have the 
same characters.

	鳥>  (is? 'a 'a)
	;;=> true
	鳥>  (is? "foo" "foo")
	;;=> true
	鳥>  (let (x ['a]) (is? x x))
	;;=> true
	鳥>  (is? ['a] ['a])
    ;;=> false

Note that it returns false for two lists with the same elements.
There's another operator for that, `eqv?` (from equivalent).

    鳥>  (eqv? ['a] ['a])
	;;=> true
	
If you want to test whether something is one of several alternatives,
you could use `or`.

    鳥>  (let (x 'c) 
	       (or (is? x 'a) (is? x 'b) (is? x 'c)))
	;;=> true
	
The `cond` operator takes alternating expression pairs and returns
the value of the expression after the first that returns a truthy
value. 
	
    鳥>  (def translate 
           (λ (sym)
             (cond
               (is? sym 'apple) 'mela 
               (is? sym 'onion) 'cipolla
               #t 'che?)))
	;;=> [Function: fn]
	
    鳥>  (translate 'apple)
    ;;=> "'mela"
    鳥>  (translate 'syzygy)
    ;;=> "'che?"

The `map` function takes a function and a list and returns the 
result of applying the function to successive elements.

	鳥>  (map (+ 10) '(1 2 3))
	;;=> [ 11, 12, 13 ]

Removing variables is a particularly good way to make programs
shorter.  An unnecessary variable increases the conceptual load of
a program by more than just what it adds to the length.

You can compose functions using the `comp` function. Composed
functions are convenient as arguments.

    鳥>  (map (comp first rest) '((a b) (c d) (e f)))
	;;=> [ "'b", "'d", "'f" ]

You can also negate a function by calling `not` on its result.

    鳥>  (map (comp not odd?) '(1 2 3 4 5 6))
	;;=> [ false, true, false, true, false, true ]

There's another function siliar to `comp` that takes a number of 
functions and applies them in sequence, building a list of each
of the results called `juxt`.

	 鳥>  ((juxt first rest) '(1 2 3))
	 ;;=> [ 1, [ 2, 3 ] ]

There are a number of functions like `map` that apply functions to
successive elements of a sequence.  The most commonly used is `filter`,
which returns the elements satisfying some test.

	鳥>  (filter odd? '(1 2 3 4 5 6 7))
	;;=> [ 1, 3, 5, 7 ]

Another includes `remove`, which does the opposite of `filter`.

	鳥>  (remove odd? '(1 2 3 4 5 6))
	;;=> [ 2, 4, 6 ]

Lists can be used to represent a wide variety of data structures,
but if you want to store key/value pairs efficiently, TL also has
hash tables.

    鳥>  (def airports (hash))
	;;=> Map {}
    鳥>  (def airports2 (set airports "Boston" 'bos))
	;;=> Map { 'Boston' => "'bos" }
    鳥>  airports
    ;;=> Map {}
    鳥>  airports2
    ;;=> Map { 'Boston' => "'bos" }
	
If you want to create a hash table filled with values, you can use
the `hash` function passing alternating key/value pairs which returns the 
corresponding hash table.
	
    鳥>  (hash 'x 1 'y 2)
    ;;=> Map { "'x" => 1, "'y" => 2 }
	
Retrieving items from a hash map is done via the `get` function.

    鳥>  (let (m (hash 'x 1 'y 2)) 
	       (get m 'x))
    ;;=> 1
    鳥>  (let (m (hash 'x 1 'y 2))
           (get m 'a))
    ;;=> undefined

Like strings, hash tables can be used wherever functions are.

    鳥>  (let (m (hash 'x 1 'y 2)) 
           (m 'x))
    ;;=> 1

    鳥>  (def codes (hash "Boston" 'bos "San Francisco" 'sfo "Paris" 'cdg))
    ;;=> Map {'Boston' => "'bos", 'San Francisco' => "'sfo", 'Paris' => "'cdg" }
	
    鳥>  (map codes '("Paris" "Boston" "San Francisco"))
    ;;=> [ "'cdg", "'bos", "'sfo" ]

The function `keys` returns the keys in a hash table, `vals` returns
the values, and `pairs` returns an array of the key/value pairs in the
hash.

    鳥>  (keys codes)
    ;;=> [ 'Boston', 'San Francisco', 'Paris' ]
    鳥>  (vals codes)
    ;;=> [ "'bos", "'sfo", "'cdg" ]
    鳥>  (pairs codes)
    ;;=> [ [ 'Boston', "'bos" ], [ 'San Francisco', "'sfo" ], [ 'Paris', "'cdg" ] ]


The most general way to build strings is `str`, which takes any number of 
arguments and mushes them into a string:

    鳥>  (str 99 " bottles of " 'bee ['r])
    ;;=> '99 bottles of bee[r]'

The `push` and `pop` operators treat lists as stacks, pushing a new
element on the front and popping one off respectively but in a 
non-destructive way.

    鳥>  (def x '(c a b))
    ;;=> [ "'c", "'a", "'b" ]
    鳥>  (pop x)
    ;;=> [ "'a", "'b" ]
    鳥>  x
    ;;=> [ "'c", "'a", "'b" ]
    鳥>  (push x 'f)
    ;;=> [ "'f", "'c", "'a", "'b" ]
    鳥>  x
    ;;=> [ "'c", "'a", "'b" ]

While managing stacks non-destructively is a powerful technique, there
are circumstances where you might want to manipulate a stack in 
place. While lists cannot be changed by the TL mechanisms, there is 
a way to model imperative change via the `ref` type. A `ref` is
analogous to a bucket that holds a value. While the value in the 
bucket does not itself change, we can change what's in the bucket
by applying functions to it and storing the result in the bucket 
instead.

    鳥>  (def stack (ref '(c a b)))
    ;;=> Ref { _value: [ "'c", "'a", "'b" ], _validator: undefined }

The `ref` named `stack` now holds the list that you'd like to 
manipulate. However, trying to pop the `ref` directly will not
work. Instead, TL provides a couple of functions that will 
manipulate the contents of the `ref` -- namely `swap!` and `cas!`.
The `swap!` function takes the ref that you want to change, a
function to apply to the value in the `ref` and any additional 
arguments that the function needs to perform its action: [^1]

    鳥>  (swap! stack pop)
    ;;=> [ "'a", "'b" ]
    鳥>  (swap! stack push 'f)
    ;;=> [ "'f", "'a", "'b" ]
    鳥>  stack
    ;;=> Ref { _value: [ "'f", "'a", "'b" ], _validator: undefined }

The `cas!` function works similarly except that it takes an
additional value that denotes the value that you expect should
be in the `ref` before the given function is applied. If the 
expected value does not match the actual value then the change
fails.

    鳥>  (cas! stack '(f a b) pop)
    ;;=> [ "'a", "'b" ]
    鳥>  stack
    ;;=> Ref { _value: [ "'a", "'b" ], _validator: undefined }

To get the value out of a `ref` the function `snap` is used. [^2]

    鳥>  (snap stack)
    ;;=> [ "'a", "'b" ]

The `sort` function returns a copy of a sequence sorted according to
the function given as the first argument.

    鳥>  (sort < '(2 9 3 7 5 1))
    ;;=> [ 1, 2, 3, 5, 7, 9 ]
	
In practice the things one needs to sort are rarely just lists of
numbers.  More often you'll need to sort things according to some
property other than their value, e.g.

    鳥>  (sort {l r | (< (len l) (len r))} '("orange" "pea" "apricot" "apple"))
    ;;=> [ 'pea', 'apple', 'orange', 'apricot' ]

TL's sort is stable, meaning the relative positions of elements
judged equal by the comparison function won't change:

    鳥>  (sort {l r | (< (len l) (len r))} '("aa" "bb" "cc"))
    ;;=> [ 'aa', 'bb', 'cc' ]
	
To supply a list of arguments to a function, use `apply`:

    鳥>  (apply + '(1 2))
    ;;=> 3

As with all functions, supplying fewer arguments than a function 
expects using `apply` will return a curried function.

    鳥>  (apply + '(1))
    ;;=> { [Function: curried] body: [Function: curried], params: [] }
    鳥>  ((apply + '(1)) 2)
    ;;=> 3

Let's take a moment to talk about macros as most Lisps have them. 
Macros are basically functions that generate code. The code generated 
by macros is basically fed back into the Lisp interpreter and executed.
This feature allows programmers to create custom syntaxtic structures 
that bottom out at Lisp primitives. Currently, TL doesn't have macros
but via the use of currying and light-weight function syntax you can
create interesting pseudo-syntax structures.

The function `when` is a good example of a TL pseudo-syntax that is
typically implemented as a macro in most Lisps.

    鳥>  (when {1} {
	       (out <c> "hello" crlf) 
		   2
		   })
    hello
    ;;=> 2
	
The implementation of `when` is pretty simple:

    (def when
      (λ (condition body)
        (if (condition)
          (body)
          nil)))

The use of the bracketed function syntax allows the deferal of the 
body of `when` until the conditional part evaluates as truthy.

    鳥>  (when {#f} {
           (out <c> "hello" crlf) 
    	   2
   	   })
    ;;=> []

We now know enough TL to read the definitions of some of the
predefined functions.  Here are a few of the simpler ones.

    (def dec {n | (- n 1)})
    (def inc (+ 1))

    (def second (comp first rest))
    (def third  (-> rest rest first))

    (def map 
      (λ (fn list)
        (if (no list) 
          list
          (cons (fn (first list))
                (map fn (rest list))))))

    (def reverse
      (λ (list)
        (reduce {acc x | (cons x acc)} nil list)))

    (def reduce
      (λ (fn init list)
        (if (no list)
          init
          (reduce fn 
                  (fn init (first list))
                  (rest list)))))

    (def foldr
      (λ (fn init list)
        (if (no list)
          init
          (fn (first list)
              (foldr fn init (rest list))))))

    (def filter
      (λ (fn list)
        (if (no list)
          list
          (if (fn (first list))
            (cons (first list) (filter fn (rest list)))
            (filter fn (rest list))))))

These definitions are taken from core.lisp. As its name suggests,
reading that file is a good way to learn more about both TL and
functional programming techniques. Nothing in it is used before it's
defined; it is an exercise in building the part of the language
written in TL up from the "axioms" defined in lisp.js. I hoped this
would yield a simple language. The definitions in core.lisp are also 
an experiment in another way. They are the language spec.

It may sound rather dubious to say that the only spec for something
is its implementation.  It sounds like the sort of thing one might
say about C++, or the Common Lisp loop macro.  But that's also how
math works.  If the implementation is sufficiently abstract, it
starts to be a good idea to make specification and implementation
identical.

I agree with Abelson and Sussman that programs should be written
primarily for people to read rather than machines to execute.  The
Lisp defined as a model of computation in McCarthy's original paper
was.  It seems worth trying to preserve this as you grow Lisp into
a language for everyday use.

Notes
=====

[^1]: The `ref` type is how one would implement something like the
ubitquitous counter.

    (let (counter (ref 0))
      (def new-id   {(swap! counter (+ 1))})
      (def reset-id {(swap! counter {0})}))

Its use being:

    鳥>  (new-id)
	;;=> 1
    鳥>  (new-id)
	;;=> 2
    鳥>  (reset-id)
	;;=> 0

[^2]: The `ref` function also accepts an optional *validation* function
that verifies that every change to the `ref` adheres to the function.
If the value in the `ref` falses a validation check then the value
`undefined` is returned and the value in the `ref` remains unchanged.

    鳥>  (def bad (ref 1 pos?))
	;;=> Ref { _value: 1, _validator: [Function: function...] }
    鳥>  (swap! bad + -10)
	;;=> undefined
    鳥>  (snap bad)
	;;=> 1





    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
    鳥> 
	
